apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
spec:
  # replicas: 2 Kubernetes object that ensures there is always a stable set of running pods for a specific workload
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      volumes:
        - name: pv-storage
          persistentVolumeClaim:
            claimName: pv-claim # name of the persistant volume claim

      containers:
      - name: db
        image: postgres:latest
        imagePullPolicy: Never

        env: 
        - name: POSTGRES_USER
          value: postgres_user

        - name: POSTGRES_PASSWORD
          value: postgres_password

        - name: POSTGRES_DB
          value: postgres_db

        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
        ports:
        - containerPort: 5432

        volumeMounts:
          - mountPath: "/data/init" # location to mount in this container
            name: pv-storage

---
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  type: NodePort # expose random ports on both nodes
  selector:
    app: db
  ports:
    - port: 5432
      targetPort: 5432

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
spec:
  # replicas: 2 # Kubernetes object that ensures there is always a stable set of running pods for a specific workload
  selector:
    matchLabels: # Use these labels to find in selector
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      initContainers:
        # container that wait for db service to be created
        - name: wait-for-db
          image: busybox:latest # For linux commands
          command: ['sh', '-c', 'until nslookup db; do echo waiting for db; sleep 2; done']
      containers:
      - name: myapp
        image: danmadar/node_web:latest
        imagePullPolicy: Never # Will not download the image

        env: 
        - name: NODE_ENV
          value: production

        - name: APP_PORT
          value: "8080"

        - name: DB_HOST
          value: db

        - name: DB_APP_PORT
          value: "5432"

        - name: DB_USER
          value: postgres_user

        - name: DB_PASSWORD
          value: postgres_password

        - name: DB_NAME
          value: postgres_db

        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
        ports:
        - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: myapp
spec:
  type: NodePort # expose random ports on both nodes
  selector:
    app: myapp
  ports:
    - port: 80
      targetPort: 8080
